#!/usr/bin/env python
#
# Copyright 2010, 2011 Michael Ossmann
#
# This file is part of Project Ubertooth.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.


import sys, os
import getopt
from dfu import dfu

bootloader_offset  = 0x0
bootloader_size    = 0x4000
application_offset = bootloader_offset + bootloader_size
application_size   = (256 * 1024) - application_offset
UBERTOOTH_FLASH    = 25

class UbertoothNotFoundError(RuntimeError):
    pass

class UbertoothInitializationError(RuntimeError):
    pass

def set_flash_mode(vendor=None, product=None):
    '''
    A function to find Ubertooth devices in firmware mode and allow the user to
    change them in to bootloader mode (without calling ubertooth-util -f)
    '''
    import usb.core, time
    print "No DFU devices found - attempting to find Ubertooth devices\n"
    ids = [
        (0x1D50, 0x6002, "Ubertooth One"),
        (0x1D50, 0x6000, "Ubertooth Zero"),
        (0xFFFF, 0x0004, "Possible Ubertooth"),
    ]
    devices = []
    for vendor_id, product_id, device in ids:
        devs = usb.core.find(idVendor=vendor_id, idProduct=product_id, find_all=True)
        if devs:
            for dev in devs:
                devices.append(dev)
                print "%d) Found '%s' with address 0x%04x 0x%04x" % (len(devices), device, vendor_id, product_id)
    if len(devices):
        value = 0
        while not value:
            value = raw_input("\nSelect a device to flash (default:1, exit:0):")
            try:
                if value == '':
                    value = 1
                else:
                    value = int(value)
                if value and value <= len(devices):
                    # Switch to DFU mode
                    dev = devices[value - 1]
                    try:
                        dev.ctrl_transfer(0x40, UBERTOOTH_FLASH, 0, 0, None)
                    except usb.core.USBError, e:
                        # Expected disconnect
                        msg = getattr(e, 'message')
                        if msg and not msg.startswith('No such device'):
                            raise
                    # Wait for firmware to restart in bootloader mode
                    time.sleep(2)
                    # Try to get device again
                    # Don't fallback to firmware mode this time
                    return get_ubertooth(vendor, product, False)
                elif value == 0:
                    sys.exit(0)
            except ValueError:
                pass
            print "Not a valid option"
            value = 0
    else:
        raise UbertoothNotFoundError("No Ubertooth found - is the device connected?")

def get_ubertooth(vendor=None, product=None, check_firmware_mode=True):
    if vendor and product:
        try:
            dev = dfu.init_dfu(vendor, product)
        except RuntimeError:
            # Found nothing - look for Ubertooth devices in firmware mode
            if check_firmware_mode:
                dev = set_flash_mode(vendor, product)
            else:
                raise UbertoothInitializationError('Could not initialise Ubertooth - is the device connected and in DFU mode?')
    else:
        ids = [
            (0x1D50, 0x6001), # UBERTOOTH_ZERO
            (0x1D50, 0x6003), # UBERTOOTH_ONE
            (0xFFFF, 0x0004), # TC13BADGE / Ubertooth with older firmware
        ]
        for vendor_id, product_id in ids:
            if (vendor and vendor == vendor_id) or \
                (product and product_id == product) or \
                not (vendor or product):
                try:
                    dev = dfu.init_dfu(vendor_id, product_id)
                    break
                except RuntimeError:
                    pass
        else:
            # Found nothing - look for Ubertooth devices in firmware mode
            if check_firmware_mode:
                dev = set_flash_mode()
            else:
                raise UbertoothInitializationError('Could not initialise Ubertooth - is the device connected and in DFU mode?')
    return dev

def usage():
    print("""
Usage: ubertooth-dfu <command> <arguments>

Write a file to application flash region:
    ubertooth-dfu --write <application firmware filename>

Read data from application flash region and write to a file:
    ubertooth-dfu --read <filename>

Add DFU signature to firmware file:
    ubertooth-dfu --sign <binary firmware filename>

Detach the bootloader and execute the application firmware:
    ubertooth-dfu --detach
""")
    sys.exit(os.EX_USAGE)

def write(filename, bootloader=False):
    f = open(filename, 'rb')
    data = f.read()
    f.close()
    vendor = product = None

    if sys.argv[2][-4:] == '.dfu':
        signer = dfu.DfuSuffix()
        suf_len, vendor, product = signer.check_suffix(data)
        firmware = data[:-suf_len]
    else:
        firmware = data
    retry = 0
    try:
        dev = get_ubertooth(vendor, product)
    except UbertoothInitializationError, e:
        # May be an old bootloader
        if (vendor, product) == (0x1D50, 0x6003):
            dev = get_ubertooth(0xFFFF, 0x0004)
        else:
            raise e

    if bootloader:
        dfu.download(dev, firmware, bootloader_offset)
    else:
        dfu.download(dev, firmware, application_offset)
    print('Write complete')

def read(filename, bootloader=False):
    dev = get_ubertooth()
    if bootloader:
        dfu.upload(dev, bootloader_offset, bootloader_size, filename)
    else:
        dfu.upload(dev, application_offset, application_size, filename)
    print('Read complete')


if __name__ == '__main__':
    if not sys.argv[1:]:
        usage()

    try:
        short_opts = "hw:r:ds:v:p:"
        long_opts = ["help", "write=", "read=", "detach", "sign=", "vendor=",
                     "product=", "write-bootloader=", "read-bootloader="]
        opts, args = getopt.getopt(sys.argv[1:], short_opts, long_opts)
    except getopt.GetoptError, e:
        print str(e)
        usage()

    vendorId = productId = dev = None
    try:
        if not opts:
            usage()
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()

            elif opt in ("-w", "--write"):
                write(arg)

            elif opt == "--write-bootloader":
                raise NotImplementedError("Bootloader writing not supported")
                write(arg, bootloader=True)

            elif opt in ("-r", "--read"):
                read(arg)

            elif opt == "--read-bootloader":
                read(arg, bootloader=True)

            elif opt in ("-d", "--detach"):
                dev = get_ubertooth()
                dfu.detach(dev)

            elif opt in ("-s", "--sign"):
                f = open(arg, 'rb')
                firmware = f.read()
                f.close()

                signer = dfu.DfuSuffix()
                # Sign for new bootloader, workaround in write{} for old.
                data = signer.add_suffix(firmware, 0x1D50, 0x6003)

                dfu_file = arg[:-4] + '.dfu'
                f = open(dfu_file, 'wb')
                f.write(data)
                f.close()
                print("Signed file written: %s" % dfu_file)
            else:
                print "Unhandled option: %s" % opt
                usage()

    except RuntimeError, e:
        if getattr(e, 'args'):
            print(e.args[0])
        else:
            print e
        exit(1)
    except Exception, e:
        print e
        if dev:
            print dev.get_status()
        exit(1)
